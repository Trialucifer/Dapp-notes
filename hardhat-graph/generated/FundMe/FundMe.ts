// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FundLog extends ethereum.Event {
  get params(): FundLog__Params {
    return new FundLog__Params(this);
  }
}

export class FundLog__Params {
  _event: FundLog;

  constructor(event: FundLog) {
    this._event = event;
  }

  get _addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundWithdDrawByOwner extends ethereum.Event {
  get params(): FundWithdDrawByOwner__Params {
    return new FundWithdDrawByOwner__Params(this);
  }
}

export class FundWithdDrawByOwner__Params {
  _event: FundWithdDrawByOwner;

  constructor(event: FundWithdDrawByOwner) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RefundBalance extends ethereum.Event {
  get params(): RefundBalance__Params {
    return new RefundBalance__Params(this);
  }
}

export class RefundBalance__Params {
  _event: RefundBalance;

  constructor(event: RefundBalance) {
    this._event = event;
  }

  get _addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundMe extends ethereum.SmartContract {
  static bind(address: Address): FundMe {
    return new FundMe("FundMe", address);
  }

  fundersToAmount(param0: Address): BigInt {
    let result = super.call(
      "fundersToAmount",
      "fundersToAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_fundersToAmount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundersToAmount",
      "fundersToAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class FundCall extends ethereum.Call {
  get inputs(): FundCall__Inputs {
    return new FundCall__Inputs(this);
  }

  get outputs(): FundCall__Outputs {
    return new FundCall__Outputs(this);
  }
}

export class FundCall__Inputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FundCall__Outputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }
}

export class GetFundCall extends ethereum.Call {
  get inputs(): GetFundCall__Inputs {
    return new GetFundCall__Inputs(this);
  }

  get outputs(): GetFundCall__Outputs {
    return new GetFundCall__Outputs(this);
  }
}

export class GetFundCall__Inputs {
  _call: GetFundCall;

  constructor(call: GetFundCall) {
    this._call = call;
  }
}

export class GetFundCall__Outputs {
  _call: GetFundCall;

  constructor(call: GetFundCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}
